#!/usr/bin/env python3
"""
Servidor HTTP simple para el Sistema de Reconocimiento Facial
No requiere Flask, solo usa la librer√≠a est√°ndar de Python
"""

import http.server
import socketserver
import webbrowser
import os
import json
from datetime import datetime
import threading
import time

class FaceRecognitionHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/face' or self.path == '/':
            # Servir la p√°gina principal
            self.path = '/demo_estatico.html'
        elif self.path == '/api/status':
            # API de estado
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                'status': 'active',
                'message': 'Sistema de Reconocimiento Facial funcionando',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'features': [
                    'Detecci√≥n facial en tiempo real',
                    'Captura de coordenadas',
                    'Registro de fecha y hora',
                    'Identificaci√≥n de personas',
                    'Exportaci√≥n a Excel'
                ],
                'developer': 'Andr√©s Mogoll√≥n',
                'version': '1.0.0'
            }
            
            self.wfile.write(json.dumps(response, indent=2).encode())
            return
        
        # Servir archivos est√°ticos normalmente
        super().do_GET()
    
    def do_POST(self):
        if self.path == '/detect_face':
            # Simular detecci√≥n facial
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # Simular datos de detecci√≥n
            import random
            known_faces = ['Andr√©s Mogoll√≥n', 'Mar√≠a Garc√≠a', 'Juan P√©rez', 'Ana L√≥pez']
            
            num_faces = random.randint(0, 3)
            results = []
            timestamp = datetime.now()
            
            for i in range(num_faces):
                is_known = random.random() > 0.3
                name = random.choice(known_faces) if is_known else 'Desconocido'
                confidence = (0.8 + random.random() * 0.2) if is_known else (0.2 + random.random() * 0.4)
                
                result = {
                    'id': i + 1,
                    'timestamp': timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                    'name': name,
                    'coordinates': {
                        'x': random.randint(100, 500),
                        'y': random.randint(100, 400)
                    },
                    'confidence': round(confidence, 3),
                    'image_path': f'face_{timestamp.strftime("%Y%m%d_%H%M%S")}_{i}.jpg',
                    'status': 'detected'
                }
                results.append(result)
            
            response = {
                'success': True,
                'results': results,
                'total_faces': num_faces,
                'timestamp': timestamp.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            self.wfile.write(json.dumps(response, indent=2).encode())
            return
        
        # Para otras rutas POST
        self.send_response(404)
        self.end_headers()
    
    def log_message(self, format, *args):
        # Personalizar mensajes de log
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{timestamp}] {format % args}")

def start_server(port=5000):
    """Iniciar el servidor HTTP"""
    try:
        # Cambiar al directorio del script
        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        
        with socketserver.TCPServer(("", port), FaceRecognitionHandler) as httpd:
            print("=" * 60)
            print("ü§ñ SISTEMA DE RECONOCIMIENTO FACIAL")
            print("üë®‚Äçüíª Desarrollado por: Andr√©s Mogoll√≥n")
            print("=" * 60)
            print(f"üöÄ Servidor iniciado en puerto {port}")
            print(f"üåê URL: http://localhost:{port}")
            print(f"üì± P√°gina principal: http://localhost:{port}/face")
            print(f"üîß API Status: http://localhost:{port}/api/status")
            print("=" * 60)
            print("üí° Presiona Ctrl+C para detener el servidor")
            print("=" * 60)
            
            # Abrir navegador autom√°ticamente
            def open_browser():
                time.sleep(1)
                webbrowser.open(f'http://localhost:{port}/face')
            
            browser_thread = threading.Thread(target=open_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            # Iniciar servidor
            httpd.serve_forever()
            
    except OSError as e:
        if e.errno == 10048:  # Puerto en uso en Windows
            print(f"‚ùå Error: El puerto {port} ya est√° en uso")
            print("üí° Intenta con otro puerto o cierra la aplicaci√≥n que lo est√© usando")
        else:
            print(f"‚ùå Error iniciando servidor: {e}")
    except KeyboardInterrupt:
        print("\n\nüõë Servidor detenido por el usuario")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

if __name__ == '__main__':
    # Intentar puerto 5000, si no est√° disponible usar 8000
    try:
        start_server(5000)
    except:
        print("‚ö†Ô∏è  Puerto 5000 no disponible, intentando puerto 8000...")
        start_server(8000)
